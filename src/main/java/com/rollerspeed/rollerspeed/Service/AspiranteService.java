/* Este archivo define un servicio en Spring Boot para manejar la lÃ³gica de negocio relacionada con los 
   aspirantes (Aspirante).

ğŸ“Œ FunciÃ³n principal: Permite guardar aspirantes en la base de datos utilizando el repositorio 
    AspiranteRepository.
 */

package com.rollerspeed.rollerspeed.Service; // Especifica que este archivo pertenece al paquete Service, el cual contiene la lÃ³gica de negocio de la aplicaciÃ³n.

import org.springframework.beans.factory.annotation.Autowired; // @Autowired â†’ Para conectar automÃ¡ticamente esta clase con otras partes del cÃ³digo.
import org.springframework.stereotype.Service; // @Service â†’ Para decirle a Spring Boot que esta clase maneja reglas del negocio.

import com.rollerspeed.rollerspeed.Model.Aspirante; // Aspirante â†’ El modelo de datos (representa un aspirante).
import com.rollerspeed.rollerspeed.Repository.AspiranteRepository; // AspiranteRepository â†’ La conexiÃ³n con la base de datos para guardar aspirantes.

@Service // @Service le dice a Spring Boot que esta clase es un servicio y que se encargarÃ¡ de manejar aspirantes.
public class AspiranteService {

    /* ğŸ“Œ @Autowired permite que aspiranteRepository funcione sin que lo creemos manualmente.  
       ğŸ’¡ Piensa en esto como una conexiÃ³n automÃ¡tica a la base de datos. */
    @Autowired 
    private AspiranteRepository aspiranteRepository;


    /*ğŸ“Œ Â¿QuÃ© hace?
          - Recibe un aspirante como parÃ¡metro.
          - Lo guarda en la base de datos usando aspiranteRepository.save(aspirante);. */
    public void guardarAspirante(Aspirante aspirante) {
        aspiranteRepository.save(aspirante);
    }
}

/*
 *ğŸŒŸ Â¿CÃ³mo se usa este servicio?
Este servicio se usa dentro de un controlador (AspiranteController.java) para guardar aspirantes cuando un usuario llena un formulario.

@Controller
@RequestMapping("/Aspirante")
public class AspiranteController {

    @Autowired
    private AspiranteService aspiranteService;

    @PostMapping("/guardar")
    public String guardarAspirante(Aspirante aspirante) {
        aspiranteService.guardarAspirante(aspirante);
        return "redirect:/Aspirante/listar";
    }
}

ğŸ“Œ Â¿QuÃ© hace?

Cuando el usuario envÃ­a el formulario de nuevo aspirante, el controlador llama a guardarAspirante(aspirante) para guardarlo en la base de datos.

ğŸ“Œ Resumen RÃ¡pido
âœ… AspiranteService maneja la lÃ³gica de los aspirantes.
âœ… Se conecta a la base de datos usando AspiranteRepository.
âœ… Tiene un mÃ©todo para guardar aspirantes (guardarAspirante).
âœ… Se usa en un controlador para guardar aspirantes desde un formulario.

ğŸ’¡ Â¿Te gustarÃ­a que agreguemos mÃ¡s funciones, como listar o eliminar aspirantes? ğŸš€
 */